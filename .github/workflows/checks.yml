# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  CODE_ARTIFACT_DOMAIN: mc-domain
  CODE_ARTIFACT_DOMAIN_OWNER: 252355243038

jobs:
  check:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]

    steps:
    - uses: actions/checkout@v4

    - name: Setup corepack
      run: corepack enable
  
    - name: Setup Node ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'
      
    - run: yarn set version 4.6.0
        
    - name: Install dependencies
      run: yarn --frozen-lockfile
    
    - name: Build
      run: yarn build

    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: build artifact
        path: |
          dist/
          dist-storybook/
        retention-days: 30

    - name: Format
      run: yarn prettier '*.{.ts,scss,css,html}' --check

    - name: Lint
      run: yarn eslint . --ext ts
    
    - name: Test
      run: yarn test

    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: coverage
        path: coverage/
        retention-days: 30

    # - name: Install Playwright Browsers
    #   run: npx playwright install --with-deps
    
    # - name: Playwright Test
    #   run: yarn test:e2e --max-failures=1

    # - uses: actions/upload-artifact@v4
    #   if: ${{ !cancelled() }}
    #   with:
    #     name: playwright-report
    #     path: playwright-report/
    #     retention-days: 30

  deployment:

    needs: check

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]

    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && github.ref == 'refs/heads/main'

    environment: Prod

    steps:
      - uses: actions/checkout@v4

      - name: Setup corepack
        run: corepack enable
    
      - name: Setup Node ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'
      
      - run: yarn set version 4.6.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: build artifact
          path: |
            ./dist
            ./dist-storybook

      - name: Publish to S3
        run: aws s3 sync dist-storybook s3://mc-storybook-bucket

      - name: Publish to codeartifact
        run: export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain $CODE_ARTIFACT_DOMAIN --domain-owner $CODE_ARTIFACT_DOMAIN_OWNER --region $AWS_DEFAULT_REGION --query authorizationToken --output text` && yarn npm publish